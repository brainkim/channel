(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{37:function(e){e.exports=JSON.parse('{"docs":{"overview":{"id":"overview","title":"Overview","description":"*NOTE: These docs assumes some familiarity with recent javascript features, specifically [promises](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises), [async/await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await) and [iterators/generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators).*","source":"@site/docs/02_overview.md","permalink":"/docs/overview","sidebar":"docs","category":"Getting Started","next":"rationale","previous":"quickstart","previous_title":"Quickstart","next_title":"Rationale"},"rationale":{"id":"rationale","title":"Rationale","description":"While [async iterators](https://github.com/tc39/proposal-async-iteration) are available in most modern javascript runtimes, they have yet to achieve widespread usage due to various perceived [flaws](https://github.com/apollographql/graphql-subscriptions/issues/116) and [pitfalls](https://github.com/tc39/proposal-async-iteration/issues/126). What‚Äôs needed is something like the `Promise` constructor, which helped promises succeed by providing a common pattern for converting callback-based APIs into promises. The `Repeater` constructor makes it easy to turn *any* callback-based source of data into an async iterator, and prevents common async iterator mistakes [by design](safety). The constructor pattern is easy to memorize and adaptable for almost every async iterator use case.","source":"@site/docs/03_rationale.md","permalink":"/docs/rationale","sidebar":"docs","category":"Getting Started","next":"combinators","previous":"overview","previous_title":"Overview","next_title":"Combining Async Iterators"},"combinators":{"id":"combinators","title":"Combining Async Iterators","description":"Combining async iterators is a [non-trivial task](https://stackoverflow.com/questions/50585456/how-can-i-interleave-merge-async-iterables), and the `Repeater` class defines four static methods similar to `Promise.race` and `Promise.all` which allow you to combine async iterators in different ways. These methods can be used to write applications in the [reactive programming](https://en.wikipedia.org/wiki/Reactive_programming) paradigm.","source":"@site/docs/04_combinators.md","permalink":"/docs/combinators","sidebar":"docs","category":"Guides","next":"safety","previous":"rationale","previous_title":"Rationale","next_title":"How are Repeaters ‚ÄúSafe‚Äù?"},"quickstart":{"id":"quickstart","title":"Quickstart","description":"## Installation","source":"@site/docs/01_quickstart.md","permalink":"/docs/quickstart","sidebar":"docs","category":"Getting Started","next":"overview","next_title":"Overview"},"safety":{"id":"safety","title":"How are Repeaters ‚ÄúSafe‚Äù?","description":"Most async iterator libraries currently available are prone to causing memory leaks through normal usage. Repeaters use the following design principles to prevent leaks:","source":"@site/docs/05_safety.md","permalink":"/docs/safety","sidebar":"docs","category":"Guides","next":"error_handling","previous":"combinators","previous_title":"Combining Async Iterators","next_title":"Error Handling"},"inverted_repeaters":{"id":"inverted_repeaters","title":"Inverted Repeaters","description":"Sometimes, you want to create an async iterator which responds to calls to `next` as asynchronous events themselves. For instance, you might want to create a timer repeater which fires a fixed period of time after `next` is called, or even throws an error if it is not called within that fixed period of time. You can create these *inverted repeaters* by taking advantage of the fact that repeaters unwrap and await promises and promise-like objects which are passed to the `push` function:","source":"@site/docs/07_inverted_repeaters.md","permalink":"/docs/inverted_repeaters","sidebar":"docs","category":"Guides","next":"utilities","previous":"error_handling","previous_title":"Error Handling","next_title":"Additional Repeater-Based Utilities"},"utilities":{"id":"utilities","title":"Additional Repeater-Based Utilities","description":"In addition to the `@repeaterjs/repeater` package, the [repeater repository](https://github.com/repeaterjs/repeater) and [package scope](https://www.npmjs.com/org/repeater) contain various async utilities implemented with repeaters.","source":"@site/docs/08_utilities.md","permalink":"/docs/utilities","sidebar":"docs","category":"Guides","previous":"inverted_repeaters","previous_title":"Inverted Repeaters"},"error_handling":{"id":"error_handling","title":"Error Handling","description":"Because error handling is important for creating robust applications, repeaters are designed to catch and propagate any errors they receive in a predictable fashion. Every promise which is passed to a repeater is preemptively caught using `Promise.prototype.catch` to prevent unhandled rejections, and the errors are forwarded to the iterator methods `next`/`return`/`throw` so repeater consumers can handle them.","source":"@site/docs/06_error_handling.md","permalink":"/docs/error_handling","sidebar":"docs","category":"Guides","next":"inverted_repeaters","previous":"safety","previous_title":"How are Repeaters ‚ÄúSafe‚Äù?","next_title":"Inverted Repeaters"},"anti-patterns":{"id":"anti-patterns","title":"Common Anti-Patterns","description":"**üë∑‚Äç‚ôÄÔ∏è Under Construction üë∑‚Äç‚ôÇÔ∏è**","source":"@site/docs/09_anti-patterns.md","permalink":"/docs/anti-patterns"}},"docsDir":"/Users/brian/Projects/repeater/website/docs","docsSidebars":{"docs":[{"type":"category","label":"Getting Started","items":[{"type":"doc","id":"quickstart"},{"type":"doc","id":"overview"},{"type":"doc","id":"rationale"}]},{"type":"category","label":"Guides","items":[{"type":"doc","id":"combinators"},{"type":"doc","id":"safety"},{"type":"doc","id":"error_handling"},{"type":"doc","id":"inverted_repeaters"},{"type":"doc","id":"utilities"}]}]},"sourceToPermalink":{"@site/docs/02_overview.md":"/docs/overview","@site/docs/03_rationale.md":"/docs/rationale","@site/docs/04_combinators.md":"/docs/combinators","@site/docs/01_quickstart.md":"/docs/quickstart","@site/docs/05_safety.md":"/docs/safety","@site/docs/07_inverted_repeaters.md":"/docs/inverted_repeaters","@site/docs/08_utilities.md":"/docs/utilities","@site/docs/06_error_handling.md":"/docs/error_handling","@site/docs/09_anti-patterns.md":"/docs/anti-patterns"},"permalinkToId":{"/docs/overview":"overview","/docs/rationale":"rationale","/docs/combinators":"combinators","/docs/quickstart":"quickstart","/docs/safety":"safety","/docs/inverted_repeaters":"inverted_repeaters","/docs/utilities":"utilities","/docs/error_handling":"error_handling","/docs/anti-patterns":"anti-patterns"}}')}}]);