(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{41:function(e){e.exports=JSON.parse('{"id":"rationale","title":"Rationale","description":"While [async iterators](https://github.com/tc39/proposal-async-iteration) are available in most modern javascript runtimes, they have yet to achieve widespread usage due to various perceived [flaws](https://github.com/apollographql/graphql-subscriptions/issues/116) and [pitfalls](https://github.com/tc39/proposal-async-iteration/issues/126). Whatâ€™s needed is something like the `Promise` constructor, which helped promises succeed by providing a common pattern for converting callback-based APIs into promises. The `Repeater` constructor makes it easy to turn *any* callback-based source of data into an async iterator, and prevents common async iterator mistakes [by design](safety). The constructor pattern is easy to memorize and adaptable for almost every async iterator use case.","source":"@site/docs/03_rationale.md","permalink":"/docs/rationale","sidebar":"docs","category":"Getting Started","next":"combinators","previous":"overview","previous_title":"Overview","next_title":"Combining Async Iterators"}')}}]);