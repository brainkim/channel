(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{53:function(e){e.exports=JSON.parse('{"id":"error_handling","title":"Error Handling","description":"Because error handling is important for creating robust applications, repeaters are designed to catch and propagate any errors they receive in a predictable fashion. Every promise which is passed to a repeater is preemptively caught using `Promise.prototype.catch` to prevent unhandled rejections, and the errors are forwarded to the iterator methods `next`/`return`/`throw` so repeater consumers can handle them.","source":"@site/docs/06_error_handling.md","permalink":"/docs/error_handling","sidebar":"docs","category":"Guides","next":"inverted_repeaters","previous":"safety","previous_title":"How are Repeaters “Safe”?","next_title":"Inverted Repeaters"}')}}]);